<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net45;net461;net48;net481;netstandard2.0;netstandard2.1;net8.0;net9.0</TargetFrameworks>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<LangVersion>latest</LangVersion>
		<GeneratePackageOnBuild>True</GeneratePackageOnBuild>
		<Version>1.1.0</Version>
		<Title>Expand linq fluent methods with some useful constructs for developing code</Title>
		<Authors>Samuele Bartolucci</Authors>
		<Description>
FluentFunctionalCoding is a .NET library providing functional programming primitives and fluent extensions for C#.
It includes types and helpers for Optionals, Outcomes (Either), Try/Catch, SwitchMap, and fluent functional operations on collections and tasks.
The library aims to enable expressive, safe, and concise code by leveraging functional programming concepts in C#.
		</Description>
		<PackageProjectUrl>https://github.com/SamueleBartolucci/FluentFunctionalCoding</PackageProjectUrl>
		<RepositoryUrl>https://github.com/SamueleBartolucci/FluentFunctionalCoding</RepositoryUrl>
		<PackageReleaseNotes>
			=> 1.1.0: Introduced retry functionality for the Try fluent type: all Try preludes now include a new parameter, numRetry, with a default value of 1.

			FluentCoding Rewrite that includes:
			Fluent Extensions: Do, Map, Or, and more for collections, tasks, and primitives.
			Fluent Types:
			- Try: Functional try/catch with fluent error handling.
			- SwitchMap: Fluent pattern matching for values and collections.
			- When: Fluent conditional logic for values and collections.
			Functional Types
			- Outcome: Functional Either type for success/failure flows.
			- Optional: Safe handling of values that may or may not exist.

			Consilidated naming and functionalities across types and extensions, hidden lots extension into intenal classes, replaced some lambda delegate with a more structured fluent notation.
		</PackageReleaseNotes>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<PackageLicenseFile>LICENSE.txt</PackageLicenseFile>
		<GenerateDocumentationFile>True</GenerateDocumentationFile>
	</PropertyGroup>


	<ItemGroup>		
		<None Include="..\..\LICENSE.txt">
		  <Pack>True</Pack>
		  <PackagePath>\</PackagePath>
		</None>
		<None Include="..\..\README.md" Pack="true" PackagePath="">
		  <CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</None>
	</ItemGroup>


	<ItemGroup>
		<InternalsVisibleTo Include="FluentFunctionalCodingTest" />
	</ItemGroup>
	
	<ItemGroup Condition="'$(TargetFramework)' == 'net461'">
	  <PackageReference Include="System.ValueTuple">
	    <Version>4.5</Version>
	  </PackageReference>
	</ItemGroup>
	
	
	<ItemGroup Condition="'$(TargetFramework)' == 'net45'">
	  <PackageReference Include="System.ValueTuple">
	    <Version>4.5</Version>
	  </PackageReference>
	</ItemGroup>
		
</Project>